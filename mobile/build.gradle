def taskRequests = getGradle().getStartParameter().getTaskRequests().toString()
def isFoss = taskRequests.contains("Foss") || taskRequests.contains("foss")

buildscript {
    ext.kotlin_coroutines_version = '1.3.3'
    ext.ok_http_version = '4.4.0'
    ext.work_manager_version = '2.3.3'
    ext.about_libraries_version = '7.1.0'
    ext.powermock_version = '2.0.5'
    ext.espresso_version = '3.2.0'
    ext.androidx_media_version = '1.0.3'

    repositories {
        maven {
            url "https://maven.fabric.io/public"
        }
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath "com.google.gms:google-services:4.3.3"
        classpath "io.fabric.tools:gradle:1.31.2"
        classpath 'de.mobilej.unmock:UnMockPlugin:0.7.5'
    }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: 'de.mobilej.unmock'
if (!isFoss) {
    apply plugin: "io.fabric"
}

android {
    buildToolsVersion "29.0.2"
    compileSdkVersion 29
    useLibrary "org.apache.http.legacy"

    defaultConfig {
        applicationId "org.openhab.habdroid"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 266
        versionName "2.11.23-beta"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        def IS_DEVELOPER = "IS_DEVELOPER"
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "boolean", IS_DEVELOPER, "false"
            buildConfigField "java.util.Date", "buildTime", "new java.util.Date(" + System.currentTimeMillis() + "L)"
        }
        debug {
            minifyEnabled false
            buildConfigField "boolean", IS_DEVELOPER, "true"
            buildConfigField "java.util.Date", "buildTime", "new java.util.Date(" + System.currentTimeMillis() + "L)"
            pseudoLocalesEnabled true
        }
    }

    flavorDimensions "license", "release"
    productFlavors {
        full {
            dimension "license"
            manifestPlaceholders = [maps_api_key: project.findProperty("mapsApiKey") ?: ""]
        }
        foss {
            dimension "license"
        }

        stable {
            dimension "release"
        }
        beta {
            dimension "release"
            applicationIdSuffix ".beta"
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                testLogging {
                    showStackTraces true
                    showCauses true
                    exceptionFormat "full"
                }
            }
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
        allWarningsAsErrors = true
    }

    androidExtensions {
        experimental = true // For Parcelize
    }
}

unMock {
    keepStartingWith "libcore."
    keepStartingWith "android.net.Uri"
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

repositories {
    maven {
        url "https://maven.fabric.io/public"
    }
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    google()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "androidx.core:core-ktx:1.2.0"
    implementation "androidx.fragment:fragment-ktx:1.2.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.preference:preference:1.1.0"
    implementation "androidx.biometric:biometric:1.0.1"
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.work:work-runtime:$work_manager_version"
    fullImplementation "androidx.work:work-gcm:$work_manager_version"
    implementation "androidx.media2:media2-widget:$androidx_media_version"
    implementation "androidx.media2:media2-player:$androidx_media_version"
    implementation "androidx.security:security-crypto:1.0.0-alpha02"
    implementation "org.jmdns:jmdns:3.5.5"
    implementation "com.squareup.okhttp3:okhttp:$ok_http_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$ok_http_version"
    implementation "com.squareup.okhttp3:okhttp-sse:$ok_http_version"
    implementation "com.larswerkman:HoloColorPicker:1.5"
    implementation "com.jaredrummler:colorpicker:1.1.0"
    implementation "com.caverock:androidsvg-aar:1.4"
    implementation("com.github.paolorotolo:appintro:v5.1.0") {
        transitive false
        exclude group: "com.intellij", module: "annotations"
    }
    // MapView support
    fullImplementation "com.google.android.gms:play-services-maps:17.0.0"
    fossImplementation "org.osmdroid:osmdroid-android:6.1.6"

    // FCM
    fullImplementation "com.google.firebase:firebase-messaging:20.1.2"

    // About screen
    implementation "com.github.daniel-stoneuk:material-about-library:2.4.2"
    // Used libraries
    implementation "com.mikepenz:aboutlibraries-core:$about_libraries_version"
    implementation "com.mikepenz:aboutlibraries:$about_libraries_version"
    implementation "com.github.GrenderG:Toasty:1.4.2"

    // Crash reporting
    fullImplementation("com.crashlytics.sdk.android:crashlytics:2.10.1@aar") {
        transitive = true
    }

    testImplementation "org.mockito:mockito-core:3.3.1"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "junit:junit:4.13"
    testImplementation "org.json:json:20190722"
    testImplementation "com.squareup.okhttp3:mockwebserver:$ok_http_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"

    // PowerMock
    testImplementation "org.powermock:powermock-core:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"

    // Espresso UI tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
}

if (!isFoss) {
    apply plugin: "com.google.gms.google-services"
}
