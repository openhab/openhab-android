def taskRequests = getGradle().getStartParameter().getTaskRequests().toString()
def isFoss = taskRequests.contains("Foss") || taskRequests.contains("foss")

buildscript {
    ext.kotlin_coroutines_version = '1.4.2'
    ext.ok_http_version = '4.9.1'
    ext.work_manager_version = '2.5.0'
    ext.about_libraries_version = '8.8.5'
    ext.powermock_version = '2.0.9'
    ext.espresso_version = '3.4.0'
    ext.exoplayer_version = '2.14.1'
    ext.acra_version = '5.8.3'

    repositories {
        mavenCentral()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.google.gms:google-services:4.3.8"
        classpath "com.google.firebase:firebase-crashlytics-gradle:2.7.1"
        classpath 'de.mobilej.unmock:UnMockPlugin:0.7.6'
        classpath "com.mikepenz.aboutlibraries.plugin:aboutlibraries-plugin:$about_libraries_version"
        classpath "de.jjohannes.gradle:missing-metadata-guava:0.4"
    }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-parcelize"
apply plugin: 'de.mobilej.unmock'
apply plugin: "com.mikepenz.aboutlibraries.plugin"
apply plugin: "de.jjohannes.missing-metadata-guava"
if (!isFoss) {
    apply plugin: "com.google.gms.google-services"
    apply plugin: "com.google.firebase.crashlytics"
}

android {
    buildToolsVersion "30.0.3"
    compileSdkVersion 30
    useLibrary "org.apache.http.legacy"

    defaultConfig {
        applicationId "org.openhab.habdroid"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 399
        versionName "2.18.1-beta"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false
            pseudoLocalesEnabled true
        }
    }

    flavorDimensions "license", "release"
    productFlavors {
        full {
            dimension "license"
            manifestPlaceholders = [maps_api_key: project.findProperty("mapsApiKey") ?: ""]
        }
        foss {
            dimension "license"
        }

        stable {
            dimension "release"
        }
        beta {
            dimension "release"
            applicationIdSuffix ".beta"
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                testLogging {
                    showStackTraces true
                    showCauses true
                    exceptionFormat "full"
                }
            }
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
        allWarningsAsErrors = true
    }
}

unMock {
    keepStartingWith "libcore."
    keepStartingWith "android.net.Uri"
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

repositories {
    maven {
        url "https://maven.fabric.io/public"
    }
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    google()
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "androidx.core:core-ktx:1.5.0"
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.biometric:biometric:1.1.0"
    implementation "com.google.android.material:material:1.4.0"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.work:work-runtime:$work_manager_version"
    fullImplementation "androidx.work:work-gcm:$work_manager_version"
    implementation "androidx.security:security-crypto:1.0.0"
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"
    implementation "org.jmdns:jmdns:3.5.7"
    implementation "com.squareup.okhttp3:okhttp:$ok_http_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$ok_http_version"
    implementation "com.squareup.okhttp3:okhttp-sse:$ok_http_version"
    // Color picker for Sitemap
    implementation "com.github.QuadFlask:colorpicker:0.0.15"
    // Color picker for preference
    implementation "com.jaredrummler:colorpicker:1.1.0"
    implementation "com.caverock:androidsvg-aar:1.4"
    implementation "com.github.AppIntro:AppIntro:6.1.0"
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    // MapView support
    fullImplementation "com.google.android.gms:play-services-maps:17.0.1"
    fossImplementation "org.osmdroid:osmdroid-android:6.1.6"
    // About screen
    implementation "com.github.daniel-stoneuk:material-about-library:3.1.2"
    // Used libraries
    implementation "com.mikepenz:aboutlibraries-core:$about_libraries_version"
    implementation "com.mikepenz:aboutlibraries:$about_libraries_version"
    implementation "com.github.GrenderG:Toasty:1.5.0"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:28.2.1")
    fullImplementation "com.google.firebase:firebase-messaging-ktx"
    fullImplementation "com.google.firebase:firebase-crashlytics-ktx"

    // Firebase replacements
    fossImplementation "ch.acra:acra-mail:$acra_version"
    fossImplementation "ch.acra:acra-notification:$acra_version"

    testImplementation "org.mockito:mockito-core:3.11.2"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.json:json:20210307"
    testImplementation "org.reflections:reflections:0.9.12"
    testImplementation "com.squareup.okhttp3:mockwebserver:$ok_http_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    // PowerMock
    testImplementation "org.powermock:powermock-core:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    // Espresso UI tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version", {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
}
